/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

rinner  0.5;
router  1.0;
rinner45    #calc "$rinner * sqrt(0.5)";
router45    #calc "$router * sqrt(0.5)";
xmax    2;
ymax    2;
zmin   -0.5; 
zmax    0.5;
nradial  10;
nquarter 10;
nxouter  20;
nyouter  20;
nz       1;

vertices 
(
            ($rinner 0 $zmin ) // 0
            ($router 0 $zmin ) // 1
            ($xmax 0 $zmin ) // 2
            ($xmax $router45 $zmin ) // 3
            ($router45 $router45 $zmin ) // 4
            ($rinner45 $rinner45 $zmin ) // 5
            ($xmax $ymax $zmin ) // 6
            ($router45 $ymax $zmin ) // 7
            (0 $ymax $zmin ) // 8
            (0 $router $zmin ) // 9 
            (0 $rinner $zmin ) // 10
            (-$rinner 0 $zmin ) // 11
            (-$router 0 $zmin ) // 12
            (-$xmax 0 $zmin ) // 13
            (-$xmax $router45 $zmin ) // 14
            (-$router45 $router45 $zmin ) // 15
            (-$rinner45 $rinner45 $zmin ) // 16
            (-$xmax $ymax $zmin ) // 17
            (-$router45 $ymax $zmin ) // 18

            ( $rinner 0 $zmax ) // 19
            ( $router 0 $zmax ) // 20
            ( $xmax 0 $zmax ) // 21
            ( $xmax $router45 $zmax ) // 22
            ( $router45 $router45 $zmax ) // 23
            ( $rinner45 $rinner45 $zmax ) // 24
            ( $xmax $ymax $zmax ) // 25
            ( $router45 $ymax $zmax ) // 26
            ( 0 $ymax $zmax ) // 27
            ( 0 $router $zmax ) // 28
            ( 0 $rinner $zmax ) // 29
            ( -$rinner 0 $zmax ) // 30
            ( -$router 0 $zmax ) // 31
            ( -$xmax 0 $zmax ) // 32
            ( -$xmax $router45 $zmax ) // 33
            ( -$router45 $router45 $zmax ) // 34
            ( -$rinner45 $rinner45 $zmax ) // 35
            ( -$xmax $ymax $zmax ) // 36
            ( -$router45 $ymax $zmax ) // 37
);

blocks
(
    hex (5 4 9 10 24 23 28 29)    ($nradial  $nquarter $nz) grading (1 1 1)
    hex (0 1 4 5 19 20 23 24)     ($nradial  $nquarter $nz) grading (1 1 1)
    hex (1 2 3 4 20 21 22 23)     ($nxouter  $nquarter $nz) grading (1 1 1)
    hex (4 3 6 7 23 22 25 26)     ($nxouter  $nyouter  $nz) grading (1 1 1)
    hex (9 4 7 8 28 23 26 27)     ($nquarter $nyouter  $nz) grading (1 1 1)
    hex (15 16 10 9 34 35 29 28)  ($nradial  $nquarter $nz) grading (1 1 1)
    hex (12 11 16 15 31 30 35 34) ($nradial  $nquarter $nz) grading (1 1 1)
    hex (13 12 15 14 32 31 34 33) ($nxouter  $nquarter $nz) grading (1 1 1)
    hex (14 15 18 17 33 34 37 36) ($nxouter  $nyouter  $nz) grading (1 1 1)
    hex (15 9 8 18 34 28 27 37)   ($nquarter $nyouter  $nz) grading (1 1 1)
);

edges
(
    arc  0  5 origin (0 0 $zmin)
    arc  5 10 origin (0 0 $zmin)
    arc  1  4 origin (0 0 $zmin)
    arc  4  9 origin (0 0 $zmin)
    arc 19 24 origin (0 0 $zmax)
    arc 24 29 origin (0 0 $zmax)
    arc 20 23 origin (0 0 $zmax)
    arc 23 28 origin (0 0 $zmax)

    arc 11 16 origin (0 0 $zmin)
    arc 16 10 origin (0 0 $zmin)
    arc 12 15 origin (0 0 $zmin)
    arc 15  9 origin (0 0 $zmin)
    arc 30 35 origin (0 0 $zmax)
    arc 35 29 origin (0 0 $zmax)
    arc 31 34 origin (0 0 $zmax)
    arc 34 28 origin (0 0 $zmax)
);

boundary
(
    down
    {
        type symmetryPlane;
        faces
        (
            (0 1 20 19)
            (1 2 21 20)
            (12 11 30 31)
            (13 12 31 32)
        );
    }
    right
    {
        type patch;
        faces
        (
            (2 3 22 21)
            (3 6 25 22)
        );
    }
    up
    {
        type symmetryPlane;
        faces
        (
            (7 8 27 26)
            (6 7 26 25)
            (8 18 37 27)
            (18 17 36 37)
        );
    }
    left
    {
        type patch;
        faces
        (
            (14 13 32 33)
            (17 14 33 36)
        );
    }
    cylinder
    {
        type symmetry;
        faces
        (
            (10 5 24 29)
            (5 0 19 24)
            (16 10 29 35)
            (11 16 35 30)
        );
    }
);

mergepatchpairs
(
);
// ************************************************************************* //
